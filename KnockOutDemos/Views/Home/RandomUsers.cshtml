@{
    ViewBag.Title = "Random Users";
}

<h3>Random Users</h3>


Show: 
<select data-bind="options: options, selectedOptions: selectedOption">
</select>

<div class="row-fluid">
    <div class="span12">
        <div class="span12">
            <input type="button" class="btn btn-success btn-small" data-bind="click: addNew"
                value="Add New" />
            <input type="button" class="btn btn-success btn-small"
                data-bind="click: deleteSelected, visible: selectedUsers().length > 0, value: deleteSelectedButtonText"
                value="Delete Selected" />
            <input type="button" class="btn btn-success btn-small"
                data-bind="click: showMore, enable: usersToShow().length != filteredUsers().length"
                value="Show More" />
            <input type="button" class="btn btn-success btn-small"
                data-bind="click: showLess, enable: usersToShow().length > 20"
                value="Show Less" />
            <input type="button" class="btn btn-success btn-small"
                data-bind="click: showAll, enable: usersToShow().length != filteredUsers().length"
                value="Show All" />
            <strong class="pull-right">
                <!--ko text: users().length-->
                <!--/ko-->
                Users listed ( 
                <!--ko text: usersToShow().length-->
                <!--/ko-->
                displayed)
            </strong>
        </div>
        <div style="clear: both"></div>
    </div>
</div>
<div class="row-fluid">
    <div id="usersDiv" class="span12" data-bind="visible: users().length > 0">
        <div class="row-fluid" data-bind="template: {
    foreach: usersToShow
    ,
    afterAdd: afterAdd,
    beforeRemove: beforeRemove
}">
            <div class="userInfo" data-bind="click: $root.selectUser">
                <div style="float: left; width: 60%">
                    <span data-bind="text: fullName" class="capitalize"></span>
                    <br />
                    <span data-bind="text: gender" class="capitalize"></span>
                    <br />
                    <span data-bind="text: city" class="capitalize"></span>
                    <br />
                </div>
                <div class="imageDiv">
                    <img data-bind="attr: { src: imageUrl }"
                        style="width: 80px" />
                </div>
                <div style="clear: both"></div>
            </div>
        </div>
    </div>
    <div class="span4" data-bind="visible: isAdding">
        <div class="well well-small" id="addUserForm">
            <form data-bind="submit: submitAdd">

                <fieldset>
                    <legend>Add New User</legend>


                    <h4></h4>
                    Gender:<select id="gender">
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                    </select><br />
                    Title:<input type="text" id="title" /><br />
                    First Name:<input type="text" id="first" /><br />
                    Last Name:<input type="text" id="last" /><br />
                    <fieldset>
                        <legend>Address</legend>
                        Street:
                    <input type="text" id="street" /><br />
                        City:
                    <input type="text" id="city" /><br />
                        Zip:
                    <input type="text" id="zip" /><br />
                        State:
                    <input type="text" id="state" /><br />
                    </fieldset>
                    Image Url:<input type="text" id="image" /><br />
                    <input type="submit" value="Submit" />
                    <button value="Submit And Add More" data-bind="click: submitAndAddNew">
                        Submit And Add
                    New</button>
                    <button value="Cancel" data-bind="click: cancelAdd">Cancel</button>
                </fieldset>
            </form>
        </div>
    </div>
</div>
@section scripts
{
    <script>
        $(function () {
            var my = {};

            my.user = function (gender, title, firstName, lastName, imageUrl, street, city, state, zip) {
                var self = this;
                self.gender = gender;
                self.title = title;
                self.firstName = firstName;
                self.lastName = lastName;
                self.imageUrl = imageUrl;
                self.street = street;
                self.city = city;
                self.state = state;
                self.zip = zip;
                self.fullName = self.title + " " + self.firstName + " " + self.lastName;
            };

            my.dataService = function () {
                var getUsers = function () {

                    return $.ajax({
                        //url: 'http://api.randomuser.me/?results=5',
                        url: '/api/Users/GetUsers',
                        dataType: 'json',
                        cache: false
                    });


                },
                    deleteUser = function (user) {
                        return $.ajax({
                            type: "POST",
                            url: '/api/Users/DeleteUser',
                            dataType: 'json',
                            data: user
                        });
                    },
                    writeUser = function (user) {
                        return $.ajax({
                            //url: 'http://api.randomuser.me/?results=5',
                            type: "POST",
                            url: '/api/Users/WriteUser',
                            dataType: 'json',
                            data: user
                        });
                    },
                    getRandomUser = function () {
                        return $.ajax({
                            url: 'http://api.randomuser.me/?results=5',
                            dataType: 'json',
                            cache: false
                        });
                    };
                return {
                    getUsers: getUsers,
                    deleteUser: deleteUser,
                    getRandomUser: getRandomUser,
                    writeUser: writeUser
                };
            }();

            // The ViewModel
            my.vm = function () {
                var users = ko.observableArray([]),
                    selectedUsers = ko.observableArray([]),
                    filteredUsers = ko.observableArray([]),
                    itemsToShow = ko.observable(),
                    showMore = function () {
                        var count = itemsToShow();
                        itemsToShow(count + 20);
                    },
                    showLess = function () {
                        var count = itemsToShow() - 20;
                        if (count < 20)
                            count = 20;
                        itemsToShow(count);
                    },
                    showAll = function () {
                        itemsToShow(users().length);
                    },

                    options = ko.observableArray(['male', 'female', 'all']),
                    selectedOption = ko.observableArray(['all']),
                    usersToShow = ko.computed(function () {
                        console.time("filter1");
                        console.time("filter2");
                        var filteredArray = ko.utils.arrayFilter(users(),
                            function (p) {
                                if (selectedOption()[0] === 'all') {
                                    return users();
                                }
                                return (selectedOption()
                                    .indexOf(p.gender().toLowerCase()) !== -1);
                            });
                        console.timeEnd("filter1");
                        filteredUsers(filteredArray);
                        console.timeEnd("filter2");

                        if (itemsToShow()) {
                            return filteredArray.slice(0, itemsToShow());
                        } else {
                            return filteredArray;
                        }
                        //return filteredArray.slice(0, itemsToShow());
                        //return filteredArray;
                    }),
                    isAdding = ko.observable(false),
                    pushData = function (data) {
                        var userArray = users();
                        $.each(data, function (i, p) {
                            userArray.push(new my.user(p.Gender, p.Title, p.FirstName,
                                    p.LastName, p.ImageUrl, p.Street, p.City, p.State, p.Zip));
                        });
                        users.valueHasMutated();
                    },
                    loadUsers = function () {
                        console.time("Loading Data");
                        console.time("Showing Data");
                        console.time("Sorting Data");
                        my.dataService.getUsers().done(function (data) {
                            console.timeEnd("Loading Data");
                            pushData(data);
                            console.timeEnd("Showing Data");
                            sort();
                            console.timeEnd("Sorting Data");
                        }
                        );
                    },
                    deleteSelectedButtonText = ko.computed(function () {
                        return "Delete Selected (" + selectedUsers().length + ")";
                    }),
                    sort = function () {
                        users.sort(
                            function (left, right) {
                                var order = 0;
                                order = left.lastName.toLowerCase() == right.lastName.toLowerCase()
                                    ? 0 : left.lastName.toLowerCase() < right.lastName.toLowerCase() ? -1 : 1;
                                if (order == 0) {
                                    order = left.firstName.toLowerCase() == right.firstName.toLowerCase()
                                        ? 0 : left.firstName.toLowerCase() < right.firstName.toLowerCase() ? -1 : 1;
                                }
                                return order;
                            }
                        );
                    },
                    deleteSelected = function () {
                        users.removeAll(selectedUsers());
                        for (var i = 0; i < selectedUsers().length; i++) {

                        }
                        selectedUsers([]);
                    },
                    selectUser = function (user, event) {
                        var index = selectedUsers.indexOf(user);
                        if (index != -1)
                            selectedUsers.remove(user);
                        else {
                            selectedUsers.push(user);
                        }

                        var $element = $(event.target);
                        if ($(event.target).hasClass('userInfo'))
                            $element.toggleClass('selected');
                        else
                            $element.parents('.userInfo').toggleClass('selected');
                    },
                    addNew = function () {
                        $('#usersDiv').removeClass('span12').addClass('span8');

                        var promise1 = $.ajax({
                            url: 'http://api.randomuser.me/',
                            dataType: 'json',
                            cache: false
                        });

                        promise1.done(function (data) {
                            var user = data.results[0].user;
                            var $formElement = $('#addUserForm');
                            $formElement.find('#title').val(user.name.title);
                            $formElement.find('#first').val(user.name.first);
                            $formElement.find('#last').val(user.name.last);
                            $formElement.find('#image').val(user.picture);
                            $formElement.find('#gender').val(user.gender);
                            $formElement.find('#city').val(user.location.city);
                            $formElement.find('#zip').val(user.location.zip);
                            $formElement.find('#state').val(user.location.state);
                            $formElement.find('#street').val(user.location.street);
                        });

                        isAdding(true);
                    },
                    seedUsers = function (n) {
                        if (!n)
                            n = 100;
                        for (var i = 0; i < n; i++) {
                            my.dataService.getRandomUser().done(function (data) {
                                $.each(data.results, function (i, p) {
                                    var user = new my.user(p.user.Gender, p.user.Title, p.user.FirstName,
                                        p.user.LastName, p.user.ImageUrl, p.user.Street, p.user.City, p.user.State, p.user.Zip);
                                   /* var user = new my.user()
                                        .gender(p.user.gender)
                                        .title(p.user.name.title)
                                        .firstName(p.user.name.first)
                                        .lastName(p.user.name.last)
                                        .imageUrl(p.user.picture)
                                        .street(p.user.location.street)
                                        .city(p.user.location.city)
                                        .state(p.user.location.state)
                                        .zip(p.user.location.zip);*/

                                    my.dataService.writeUser(user)
                                        .done(
                                            function () {
                                                users.push(user);

                                            })
                                        .fail(function () {
                                            console.log("Failed");
                                        });
                                });
                            });
                        }
                    },
                    pushUser = function () {
                        var $formElement = $('#addUserForm');
                        var title = $formElement.find('#title').val();
                        var name = $formElement.find('#first').val();
                        var last = $formElement.find('#last').val();
                        var gender = $formElement.find('#gender').val();
                        var street = $formElement.find('#street').val();
                        var state = $formElement.find('#state').val();
                        var zip = $formElement.find('#zip').val();
                        var city = $formElement.find('#city').val();
                        var imageUrl = $formElement.find('#image').val();
                        
                        var user = new my.user(gender, title, firstName,
                                        lastName, imageUrl, street, city, state, zip);
                        
                 /*       var user = new my.user()
                            .gender(gender)
                            .title(title)
                            .firstName(name)
                            .lastName(last)
                            .imageUrl(imageUrl)
                            .street(street)
                            .city(city)
                            .state(state)
                            .zip(zip);*/
                        my.dataService.writeUser(user).done(
                            function () {
                                users.push(user);
                            }).fail(function () {
                                console.log("Failed");
                            });

                    },
                    cancelAdd = function (formElement) {
                        $('#usersDiv').removeClass('span8').addClass('span12');
                        isAdding(false);
                    },
                    submitAdd = function (formElement) {
                        pushUser();
                        sort();
                        $('#usersDiv').removeClass('span8').addClass('span12');
                        isAdding(false);
                    },
                    afterAdd = function (elem) {
                        $(elem).hide().fadeIn('slow');
                    },
                    beforeRemove = function (elem) {
                        $(elem).fadeOut('slow');
                    },
                    submitAndAddNew = function (formElement) {
                        pushUser();
                        sort();
                        addNew();
                    };

                return {
                    seedUsers: seedUsers,
                    users: users,
                    filteredUsers: filteredUsers,
                    usersToShow: usersToShow,
                    itemsToShow: itemsToShow,
                    showMore: showMore,
                    showLess: showLess,
                    showAll: showAll,
                    selectedUsers: selectedUsers,
                    options: options,
                    selectedOption: selectedOption,
                    isAdding: isAdding,
                    loadUsers: loadUsers,
                    sort: sort,
                    deleteSelected: deleteSelected,
                    selectUser: selectUser,
                    addNew: addNew,
                    cancelAdd: cancelAdd,
                    submitAdd: submitAdd,
                    submitAndAddNew: submitAndAddNew,
                    deleteSelectedButtonText: deleteSelectedButtonText,
                    afterAdd: afterAdd,
                    beforeRemove: beforeRemove
                };
            }();


            my.vm.loadUsers();
            //my.vm.seedUsers(100);

            ko.applyBindings(my.vm);
        });
    </script>

}
